{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LayoutTreeCrawler = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar merge_1 = tslib_1.__importDefault(require(\"lodash/merge\"));\n\nvar isFunction_1 = tslib_1.__importDefault(require(\"lodash/isFunction\"));\n\nvar LayoutType_1 = require(\"./LayoutType\");\n\nvar LayoutTreeCrawler = function () {\n  function LayoutTreeCrawler(store, optionsProcessor) {\n    _classCallCheck(this, LayoutTreeCrawler);\n\n    this.store = store;\n    this.optionsProcessor = optionsProcessor;\n    this.crawl = this.crawl.bind(this);\n  }\n\n  _createClass(LayoutTreeCrawler, [{\n    key: \"crawl\",\n    value: function crawl(node, commandName) {\n      var _this = this;\n\n      if (node.type === LayoutType_1.LayoutType.Component) {\n        this.handleComponent(node);\n      }\n\n      this.optionsProcessor.processOptions(node.data.options, commandName);\n      node.children.forEach(function (value) {\n        return _this.crawl(value, commandName);\n      });\n    }\n  }, {\n    key: \"handleComponent\",\n    value: function handleComponent(node) {\n      this.assertComponentDataName(node);\n      this.savePropsToStore(node);\n      this.applyStaticOptions(node);\n      node.data.passProps = undefined;\n    }\n  }, {\n    key: \"savePropsToStore\",\n    value: function savePropsToStore(node) {\n      this.store.updateProps(node.id, node.data.passProps);\n    }\n  }, {\n    key: \"isComponentWithOptions\",\n    value: function isComponentWithOptions(component) {\n      return component.options !== undefined;\n    }\n  }, {\n    key: \"applyStaticOptions\",\n    value: function applyStaticOptions(node) {\n      node.data.options = merge_1.default({}, this.staticOptionsIfPossible(node), node.data.options);\n    }\n  }, {\n    key: \"staticOptionsIfPossible\",\n    value: function staticOptionsIfPossible(node) {\n      var foundReactGenerator = this.store.getComponentClassForName(node.data.name);\n      var reactComponent = foundReactGenerator ? foundReactGenerator() : undefined;\n\n      if (reactComponent && this.isComponentWithOptions(reactComponent)) {\n        return isFunction_1.default(reactComponent.options) ? reactComponent.options(_objectSpread({\n          componentId: node.id\n        }, node.data.passProps) || {}) : reactComponent.options;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"assertComponentDataName\",\n    value: function assertComponentDataName(component) {\n      if (!component.data.name) {\n        throw new Error('Missing component data.name');\n      }\n    }\n  }]);\n\n  return LayoutTreeCrawler;\n}();\n\nexports.LayoutTreeCrawler = LayoutTreeCrawler;","map":{"version":3,"sources":["C:/Users/JHON/Documents/MEGA/LABURO/aumio/challenge-01/Aumionista/node_modules/react-native-navigation/lib/dist/commands/LayoutTreeCrawler.js"],"names":["Object","defineProperty","exports","value","LayoutTreeCrawler","tslib_1","require","merge_1","__importDefault","isFunction_1","LayoutType_1","store","optionsProcessor","crawl","bind","node","commandName","type","LayoutType","Component","handleComponent","processOptions","data","options","children","forEach","assertComponentDataName","savePropsToStore","applyStaticOptions","passProps","undefined","updateProps","id","component","default","staticOptionsIfPossible","foundReactGenerator","getComponentClassForName","name","reactComponent","isComponentWithOptions","componentId","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LayoutTreeCrawler = void 0;\nconst tslib_1 = require(\"tslib\");\nconst merge_1 = tslib_1.__importDefault(require(\"lodash/merge\"));\nconst isFunction_1 = tslib_1.__importDefault(require(\"lodash/isFunction\"));\nconst LayoutType_1 = require(\"./LayoutType\");\nclass LayoutTreeCrawler {\n    constructor(store, optionsProcessor) {\n        this.store = store;\n        this.optionsProcessor = optionsProcessor;\n        this.crawl = this.crawl.bind(this);\n    }\n    crawl(node, commandName) {\n        if (node.type === LayoutType_1.LayoutType.Component) {\n            this.handleComponent(node);\n        }\n        this.optionsProcessor.processOptions(node.data.options, commandName);\n        node.children.forEach((value) => this.crawl(value, commandName));\n    }\n    handleComponent(node) {\n        this.assertComponentDataName(node);\n        this.savePropsToStore(node);\n        this.applyStaticOptions(node);\n        node.data.passProps = undefined;\n    }\n    savePropsToStore(node) {\n        this.store.updateProps(node.id, node.data.passProps);\n    }\n    isComponentWithOptions(component) {\n        return component.options !== undefined;\n    }\n    applyStaticOptions(node) {\n        node.data.options = merge_1.default({}, this.staticOptionsIfPossible(node), node.data.options);\n    }\n    staticOptionsIfPossible(node) {\n        const foundReactGenerator = this.store.getComponentClassForName(node.data.name);\n        const reactComponent = foundReactGenerator ? foundReactGenerator() : undefined;\n        if (reactComponent && this.isComponentWithOptions(reactComponent)) {\n            return isFunction_1.default(reactComponent.options)\n                ? reactComponent.options({ componentId: node.id, ...node.data.passProps } || {})\n                : reactComponent.options;\n        }\n        return {};\n    }\n    assertComponentDataName(component) {\n        if (!component.data.name) {\n            throw new Error('Missing component data.name');\n        }\n    }\n}\nexports.LayoutTreeCrawler = LayoutTreeCrawler;\n"]},"metadata":{},"sourceType":"script"}