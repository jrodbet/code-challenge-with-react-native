{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComponentEventsObserver = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar isString_1 = tslib_1.__importDefault(require(\"lodash/isString\"));\n\nvar isNil_1 = tslib_1.__importDefault(require(\"lodash/isNil\"));\n\nvar uniqueId_1 = tslib_1.__importDefault(require(\"lodash/uniqueId\"));\n\nvar unset_1 = tslib_1.__importDefault(require(\"lodash/unset\"));\n\nvar forEach_1 = tslib_1.__importDefault(require(\"lodash/forEach\"));\n\nvar ComponentEventsObserver = function () {\n  function ComponentEventsObserver(nativeEventsReceiver, store) {\n    _classCallCheck(this, ComponentEventsObserver);\n\n    this.nativeEventsReceiver = nativeEventsReceiver;\n    this.store = store;\n    this.listeners = {};\n    this.alreadyRegistered = false;\n    this.notifyComponentDidAppear = this.notifyComponentDidAppear.bind(this);\n    this.notifyComponentDidDisappear = this.notifyComponentDidDisappear.bind(this);\n    this.notifyNavigationButtonPressed = this.notifyNavigationButtonPressed.bind(this);\n    this.notifySearchBarUpdated = this.notifySearchBarUpdated.bind(this);\n    this.notifySearchBarCancelPressed = this.notifySearchBarCancelPressed.bind(this);\n    this.notifyPreviewCompleted = this.notifyPreviewCompleted.bind(this);\n    this.notifyScreenPopped = this.notifyScreenPopped.bind(this);\n  }\n\n  _createClass(ComponentEventsObserver, [{\n    key: \"registerOnceForAllComponentEvents\",\n    value: function registerOnceForAllComponentEvents() {\n      if (this.alreadyRegistered) {\n        return;\n      }\n\n      this.alreadyRegistered = true;\n      this.nativeEventsReceiver.registerComponentDidAppearListener(this.notifyComponentDidAppear);\n      this.nativeEventsReceiver.registerComponentDidDisappearListener(this.notifyComponentDidDisappear);\n      this.nativeEventsReceiver.registerNavigationButtonPressedListener(this.notifyNavigationButtonPressed);\n      this.nativeEventsReceiver.registerSearchBarUpdatedListener(this.notifySearchBarUpdated);\n      this.nativeEventsReceiver.registerSearchBarCancelPressedListener(this.notifySearchBarCancelPressed);\n      this.nativeEventsReceiver.registerPreviewCompletedListener(this.notifyPreviewCompleted);\n      this.nativeEventsReceiver.registerScreenPoppedListener(this.notifyPreviewCompleted);\n    }\n  }, {\n    key: \"bindComponent\",\n    value: function bindComponent(component, componentId) {\n      var computedComponentId = componentId || component.props.componentId;\n\n      if (!isString_1.default(computedComponentId)) {\n        throw new Error(\"bindComponent expects a component with a componentId in props or a componentId as the second argument\");\n      }\n\n      return this.registerComponentListener(component, computedComponentId);\n    }\n  }, {\n    key: \"registerComponentListener\",\n    value: function registerComponentListener(listener, componentId) {\n      var _this = this;\n\n      if (!isString_1.default(componentId)) {\n        throw new Error(\"registerComponentListener expects a componentId as the second argument\");\n      }\n\n      if (isNil_1.default(this.listeners[componentId])) {\n        this.listeners[componentId] = {};\n      }\n\n      var key = uniqueId_1.default();\n      this.listeners[componentId][key] = listener;\n      return {\n        remove: function remove() {\n          return unset_1.default(_this.listeners[componentId], key);\n        }\n      };\n    }\n  }, {\n    key: \"unmounted\",\n    value: function unmounted(componentId) {\n      unset_1.default(this.listeners, componentId);\n    }\n  }, {\n    key: \"notifyComponentDidAppear\",\n    value: function notifyComponentDidAppear(event) {\n      event.passProps = this.store.getPropsForId(event.componentId);\n      this.triggerOnAllListenersByComponentId(event, 'componentDidAppear');\n    }\n  }, {\n    key: \"notifyComponentDidDisappear\",\n    value: function notifyComponentDidDisappear(event) {\n      this.triggerOnAllListenersByComponentId(event, 'componentDidDisappear');\n    }\n  }, {\n    key: \"notifyNavigationButtonPressed\",\n    value: function notifyNavigationButtonPressed(event) {\n      this.triggerOnAllListenersByComponentId(event, 'navigationButtonPressed');\n    }\n  }, {\n    key: \"notifySearchBarUpdated\",\n    value: function notifySearchBarUpdated(event) {\n      this.triggerOnAllListenersByComponentId(event, 'searchBarUpdated');\n    }\n  }, {\n    key: \"notifySearchBarCancelPressed\",\n    value: function notifySearchBarCancelPressed(event) {\n      this.triggerOnAllListenersByComponentId(event, 'searchBarCancelPressed');\n    }\n  }, {\n    key: \"notifyPreviewCompleted\",\n    value: function notifyPreviewCompleted(event) {\n      this.triggerOnAllListenersByComponentId(event, 'previewCompleted');\n    }\n  }, {\n    key: \"notifyScreenPopped\",\n    value: function notifyScreenPopped(event) {\n      this.triggerOnAllListenersByComponentId(event, 'screenPopped');\n    }\n  }, {\n    key: \"triggerOnAllListenersByComponentId\",\n    value: function triggerOnAllListenersByComponentId(event, method) {\n      forEach_1.default(this.listeners[event.componentId], function (component) {\n        if (component && component[method]) {\n          component[method](event);\n        }\n      });\n    }\n  }]);\n\n  return ComponentEventsObserver;\n}();\n\nexports.ComponentEventsObserver = ComponentEventsObserver;","map":{"version":3,"sources":["C:/Users/JHON/Documents/MEGA/LABURO/aumio/challenge-01/Aumionista/node_modules/react-native-navigation/lib/dist/events/ComponentEventsObserver.js"],"names":["Object","defineProperty","exports","value","ComponentEventsObserver","tslib_1","require","isString_1","__importDefault","isNil_1","uniqueId_1","unset_1","forEach_1","nativeEventsReceiver","store","listeners","alreadyRegistered","notifyComponentDidAppear","bind","notifyComponentDidDisappear","notifyNavigationButtonPressed","notifySearchBarUpdated","notifySearchBarCancelPressed","notifyPreviewCompleted","notifyScreenPopped","registerComponentDidAppearListener","registerComponentDidDisappearListener","registerNavigationButtonPressedListener","registerSearchBarUpdatedListener","registerSearchBarCancelPressedListener","registerPreviewCompletedListener","registerScreenPoppedListener","component","componentId","computedComponentId","props","default","Error","registerComponentListener","listener","key","remove","event","passProps","getPropsForId","triggerOnAllListenersByComponentId","method"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComponentEventsObserver = void 0;\nconst tslib_1 = require(\"tslib\");\nconst isString_1 = tslib_1.__importDefault(require(\"lodash/isString\"));\nconst isNil_1 = tslib_1.__importDefault(require(\"lodash/isNil\"));\nconst uniqueId_1 = tslib_1.__importDefault(require(\"lodash/uniqueId\"));\nconst unset_1 = tslib_1.__importDefault(require(\"lodash/unset\"));\nconst forEach_1 = tslib_1.__importDefault(require(\"lodash/forEach\"));\nclass ComponentEventsObserver {\n    constructor(nativeEventsReceiver, store) {\n        this.nativeEventsReceiver = nativeEventsReceiver;\n        this.store = store;\n        this.listeners = {};\n        this.alreadyRegistered = false;\n        this.notifyComponentDidAppear = this.notifyComponentDidAppear.bind(this);\n        this.notifyComponentDidDisappear = this.notifyComponentDidDisappear.bind(this);\n        this.notifyNavigationButtonPressed = this.notifyNavigationButtonPressed.bind(this);\n        this.notifySearchBarUpdated = this.notifySearchBarUpdated.bind(this);\n        this.notifySearchBarCancelPressed = this.notifySearchBarCancelPressed.bind(this);\n        this.notifyPreviewCompleted = this.notifyPreviewCompleted.bind(this);\n        this.notifyScreenPopped = this.notifyScreenPopped.bind(this);\n    }\n    registerOnceForAllComponentEvents() {\n        if (this.alreadyRegistered) {\n            return;\n        }\n        this.alreadyRegistered = true;\n        this.nativeEventsReceiver.registerComponentDidAppearListener(this.notifyComponentDidAppear);\n        this.nativeEventsReceiver.registerComponentDidDisappearListener(this.notifyComponentDidDisappear);\n        this.nativeEventsReceiver.registerNavigationButtonPressedListener(this.notifyNavigationButtonPressed);\n        this.nativeEventsReceiver.registerSearchBarUpdatedListener(this.notifySearchBarUpdated);\n        this.nativeEventsReceiver.registerSearchBarCancelPressedListener(this.notifySearchBarCancelPressed);\n        this.nativeEventsReceiver.registerPreviewCompletedListener(this.notifyPreviewCompleted);\n        this.nativeEventsReceiver.registerScreenPoppedListener(this.notifyPreviewCompleted);\n    }\n    bindComponent(component, componentId) {\n        const computedComponentId = componentId || component.props.componentId;\n        if (!isString_1.default(computedComponentId)) {\n            throw new Error(`bindComponent expects a component with a componentId in props or a componentId as the second argument`);\n        }\n        return this.registerComponentListener(component, computedComponentId);\n    }\n    registerComponentListener(listener, componentId) {\n        if (!isString_1.default(componentId)) {\n            throw new Error(`registerComponentListener expects a componentId as the second argument`);\n        }\n        if (isNil_1.default(this.listeners[componentId])) {\n            this.listeners[componentId] = {};\n        }\n        const key = uniqueId_1.default();\n        this.listeners[componentId][key] = listener;\n        return { remove: () => unset_1.default(this.listeners[componentId], key) };\n    }\n    unmounted(componentId) {\n        unset_1.default(this.listeners, componentId);\n    }\n    notifyComponentDidAppear(event) {\n        event.passProps = this.store.getPropsForId(event.componentId);\n        this.triggerOnAllListenersByComponentId(event, 'componentDidAppear');\n    }\n    notifyComponentDidDisappear(event) {\n        this.triggerOnAllListenersByComponentId(event, 'componentDidDisappear');\n    }\n    notifyNavigationButtonPressed(event) {\n        this.triggerOnAllListenersByComponentId(event, 'navigationButtonPressed');\n    }\n    notifySearchBarUpdated(event) {\n        this.triggerOnAllListenersByComponentId(event, 'searchBarUpdated');\n    }\n    notifySearchBarCancelPressed(event) {\n        this.triggerOnAllListenersByComponentId(event, 'searchBarCancelPressed');\n    }\n    notifyPreviewCompleted(event) {\n        this.triggerOnAllListenersByComponentId(event, 'previewCompleted');\n    }\n    notifyScreenPopped(event) {\n        this.triggerOnAllListenersByComponentId(event, 'screenPopped');\n    }\n    triggerOnAllListenersByComponentId(event, method) {\n        forEach_1.default(this.listeners[event.componentId], (component) => {\n            if (component && component[method]) {\n                component[method](event);\n            }\n        });\n    }\n}\nexports.ComponentEventsObserver = ComponentEventsObserver;\n"]},"metadata":{},"sourceType":"script"}