{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ComponentRegistry = void 0;\n\nvar ComponentRegistry = function () {\n  function ComponentRegistry(store, componentEventsObserver, componentWrapper, appRegistryService) {\n    _classCallCheck(this, ComponentRegistry);\n\n    this.store = store;\n    this.componentEventsObserver = componentEventsObserver;\n    this.componentWrapper = componentWrapper;\n    this.appRegistryService = appRegistryService;\n  }\n\n  _createClass(ComponentRegistry, [{\n    key: \"registerComponent\",\n    value: function registerComponent(componentName, componentProvider, concreteComponentProvider, ReduxProvider, reduxStore) {\n      var _this = this;\n\n      var NavigationComponent = function NavigationComponent() {\n        if (_this.store.hasRegisteredWrappedComponent(componentName)) {\n          return _this.store.getWrappedComponent(componentName);\n        } else {\n          var wrappedComponent = _this.componentWrapper.wrap(componentName.toString(), componentProvider, _this.store, _this.componentEventsObserver, concreteComponentProvider, ReduxProvider, reduxStore);\n\n          _this.store.setWrappedComponent(componentName, wrappedComponent);\n\n          return wrappedComponent;\n        }\n      };\n\n      this.store.setComponentClassForName(componentName.toString(), NavigationComponent);\n      this.appRegistryService.registerComponent(componentName.toString(), NavigationComponent);\n      return NavigationComponent;\n    }\n  }]);\n\n  return ComponentRegistry;\n}();\n\nexports.ComponentRegistry = ComponentRegistry;","map":{"version":3,"sources":["C:/Users/JHON/Documents/MEGA/LABURO/aumio/challenge-01/Aumionista/node_modules/react-native-navigation/lib/dist/components/ComponentRegistry.js"],"names":["Object","defineProperty","exports","value","ComponentRegistry","store","componentEventsObserver","componentWrapper","appRegistryService","componentName","componentProvider","concreteComponentProvider","ReduxProvider","reduxStore","NavigationComponent","hasRegisteredWrappedComponent","getWrappedComponent","wrappedComponent","wrap","toString","setWrappedComponent","setComponentClassForName","registerComponent"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;IACMA,iB;AACF,6BAAYC,KAAZ,EAAmBC,uBAAnB,EAA4CC,gBAA5C,EAA8DC,kBAA9D,EAAkF;AAAA;;AAC9E,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACH;;;;sCACiBC,a,EAAeC,iB,EAAmBC,yB,EAA2BC,a,EAAeC,U,EAAY;AAAA;;AACtG,UAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9B,YAAI,KAAI,CAACT,KAAL,CAAWU,6BAAX,CAAyCN,aAAzC,CAAJ,EAA6D;AACzD,iBAAO,KAAI,CAACJ,KAAL,CAAWW,mBAAX,CAA+BP,aAA/B,CAAP;AACH,SAFD,MAGK;AACD,cAAMQ,gBAAgB,GAAG,KAAI,CAACV,gBAAL,CAAsBW,IAAtB,CAA2BT,aAAa,CAACU,QAAd,EAA3B,EAAqDT,iBAArD,EAAwE,KAAI,CAACL,KAA7E,EAAoF,KAAI,CAACC,uBAAzF,EAAkHK,yBAAlH,EAA6IC,aAA7I,EAA4JC,UAA5J,CAAzB;;AACA,UAAA,KAAI,CAACR,KAAL,CAAWe,mBAAX,CAA+BX,aAA/B,EAA8CQ,gBAA9C;;AACA,iBAAOA,gBAAP;AACH;AACJ,OATD;;AAUA,WAAKZ,KAAL,CAAWgB,wBAAX,CAAoCZ,aAAa,CAACU,QAAd,EAApC,EAA8DL,mBAA9D;AACA,WAAKN,kBAAL,CAAwBc,iBAAxB,CAA0Cb,aAAa,CAACU,QAAd,EAA1C,EAAoEL,mBAApE;AACA,aAAOA,mBAAP;AACH;;;;;;AAELZ,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComponentRegistry = void 0;\nclass ComponentRegistry {\n    constructor(store, componentEventsObserver, componentWrapper, appRegistryService) {\n        this.store = store;\n        this.componentEventsObserver = componentEventsObserver;\n        this.componentWrapper = componentWrapper;\n        this.appRegistryService = appRegistryService;\n    }\n    registerComponent(componentName, componentProvider, concreteComponentProvider, ReduxProvider, reduxStore) {\n        const NavigationComponent = () => {\n            if (this.store.hasRegisteredWrappedComponent(componentName)) {\n                return this.store.getWrappedComponent(componentName);\n            }\n            else {\n                const wrappedComponent = this.componentWrapper.wrap(componentName.toString(), componentProvider, this.store, this.componentEventsObserver, concreteComponentProvider, ReduxProvider, reduxStore);\n                this.store.setWrappedComponent(componentName, wrappedComponent);\n                return wrappedComponent;\n            }\n        };\n        this.store.setComponentClassForName(componentName.toString(), NavigationComponent);\n        this.appRegistryService.registerComponent(componentName.toString(), NavigationComponent);\n        return NavigationComponent;\n    }\n}\nexports.ComponentRegistry = ComponentRegistry;\n"]},"metadata":{},"sourceType":"script"}