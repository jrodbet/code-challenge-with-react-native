{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Commands = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar cloneDeep_1 = tslib_1.__importDefault(require(\"lodash/cloneDeep\"));\n\nvar map_1 = tslib_1.__importDefault(require(\"lodash/map\"));\n\nvar CommandName_1 = require(\"../interfaces/CommandName\");\n\nvar Commands = function () {\n  function Commands(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor) {\n    _classCallCheck(this, Commands);\n\n    this.store = store;\n    this.nativeCommandsSender = nativeCommandsSender;\n    this.layoutTreeParser = layoutTreeParser;\n    this.layoutTreeCrawler = layoutTreeCrawler;\n    this.commandsObserver = commandsObserver;\n    this.uniqueIdProvider = uniqueIdProvider;\n    this.optionsProcessor = optionsProcessor;\n    this.layoutProcessor = layoutProcessor;\n  }\n\n  _createClass(Commands, [{\n    key: \"setRoot\",\n    value: function setRoot(simpleApi) {\n      var _this = this;\n\n      var input = cloneDeep_1.default(simpleApi);\n      var processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);\n      var root = this.layoutTreeParser.parse(processedRoot);\n      var modals = map_1.default(input.modals, function (modal) {\n        var processedModal = _this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);\n\n        return _this.layoutTreeParser.parse(processedModal);\n      });\n      var overlays = map_1.default(input.overlays, function (overlay) {\n        var processedOverlay = _this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);\n\n        return _this.layoutTreeParser.parse(processedOverlay);\n      });\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetRoot);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetRoot, {\n        commandId: commandId,\n        layout: {\n          root: root,\n          modals: modals,\n          overlays: overlays\n        }\n      });\n      this.layoutTreeCrawler.crawl(root, CommandName_1.CommandName.SetRoot);\n      modals.forEach(function (modalLayout) {\n        _this.layoutTreeCrawler.crawl(modalLayout, CommandName_1.CommandName.SetRoot);\n      });\n      overlays.forEach(function (overlayLayout) {\n        _this.layoutTreeCrawler.crawl(overlayLayout, CommandName_1.CommandName.SetRoot);\n      });\n      var result = this.nativeCommandsSender.setRoot(commandId, {\n        root: root,\n        modals: modals,\n        overlays: overlays\n      });\n      return result;\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      var input = cloneDeep_1.default(options);\n      this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);\n      this.nativeCommandsSender.setDefaultOptions(input);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, {\n        options: options\n      });\n    }\n  }, {\n    key: \"mergeOptions\",\n    value: function mergeOptions(componentId, options) {\n      var input = cloneDeep_1.default(options);\n      this.optionsProcessor.processOptions(input, CommandName_1.CommandName.MergeOptions);\n      this.nativeCommandsSender.mergeOptions(componentId, input);\n      this.commandsObserver.notify(CommandName_1.CommandName.MergeOptions, {\n        componentId: componentId,\n        options: options\n      });\n    }\n  }, {\n    key: \"updateProps\",\n    value: function updateProps(componentId, props) {\n      this.store.updateProps(componentId, props);\n      this.commandsObserver.notify(CommandName_1.CommandName.UpdateProps, {\n        componentId: componentId,\n        props: props\n      });\n    }\n  }, {\n    key: \"showModal\",\n    value: function showModal(layout) {\n      var layoutCloned = cloneDeep_1.default(layout);\n      var layoutProcessed = this.layoutProcessor.process(layoutCloned, CommandName_1.CommandName.ShowModal);\n      var layoutNode = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowModal);\n      this.commandsObserver.notify(CommandName_1.CommandName.ShowModal, {\n        commandId: commandId,\n        layout: layoutNode\n      });\n      this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.ShowModal);\n      var result = this.nativeCommandsSender.showModal(commandId, layoutNode);\n      return result;\n    }\n  }, {\n    key: \"dismissModal\",\n    value: function dismissModal(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);\n      var result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"dismissAllModals\",\n    value: function dismissAllModals(mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);\n      var result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, {\n        commandId: commandId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"push\",\n    value: function push(componentId, simpleApi) {\n      var input = cloneDeep_1.default(simpleApi);\n      var layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.Push);\n      var layout = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Push);\n      this.commandsObserver.notify(CommandName_1.CommandName.Push, {\n        commandId: commandId,\n        componentId: componentId,\n        layout: layout\n      });\n      this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.Push);\n      var result = this.nativeCommandsSender.push(commandId, componentId, layout);\n      return result;\n    }\n  }, {\n    key: \"pop\",\n    value: function pop(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);\n      var result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.Pop, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"popTo\",\n    value: function popTo(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);\n      var result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.PopTo, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(componentId, mergeOptions) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);\n      var result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);\n      this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, {\n        commandId: commandId,\n        componentId: componentId,\n        mergeOptions: mergeOptions\n      });\n      return result;\n    }\n  }, {\n    key: \"setStackRoot\",\n    value: function setStackRoot(componentId, children) {\n      var _this2 = this;\n\n      var input = map_1.default(cloneDeep_1.default(children), function (simpleApi) {\n        var layoutProcessed = _this2.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);\n\n        var layout = _this2.layoutTreeParser.parse(layoutProcessed);\n\n        return layout;\n      });\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetStackRoot);\n      this.commandsObserver.notify(CommandName_1.CommandName.SetStackRoot, {\n        commandId: commandId,\n        componentId: componentId,\n        layout: input\n      });\n      input.forEach(function (layoutNode) {\n        _this2.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.SetStackRoot);\n      });\n      var result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);\n      return result;\n    }\n  }, {\n    key: \"showOverlay\",\n    value: function showOverlay(simpleApi) {\n      var input = cloneDeep_1.default(simpleApi);\n      var layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.ShowOverlay);\n      var layout = this.layoutTreeParser.parse(layoutProcessed);\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowOverlay);\n      this.commandsObserver.notify(CommandName_1.CommandName.ShowOverlay, {\n        commandId: commandId,\n        layout: layout\n      });\n      this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.ShowOverlay);\n      var result = this.nativeCommandsSender.showOverlay(commandId, layout);\n      return result;\n    }\n  }, {\n    key: \"dismissOverlay\",\n    value: function dismissOverlay(componentId) {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissOverlay);\n      var result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);\n      this.commandsObserver.notify(CommandName_1.CommandName.DismissOverlay, {\n        commandId: commandId,\n        componentId: componentId\n      });\n      return result;\n    }\n  }, {\n    key: \"getLaunchArgs\",\n    value: function getLaunchArgs() {\n      var commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.GetLaunchArgs);\n      var result = this.nativeCommandsSender.getLaunchArgs(commandId);\n      this.commandsObserver.notify(CommandName_1.CommandName.GetLaunchArgs, {\n        commandId: commandId\n      });\n      return result;\n    }\n  }]);\n\n  return Commands;\n}();\n\nexports.Commands = Commands;","map":{"version":3,"sources":["C:/Users/JHON/Documents/MEGA/LABURO/aumio/challenge-01/Aumionista/node_modules/react-native-navigation/lib/dist/commands/Commands.js"],"names":["Object","defineProperty","exports","value","Commands","tslib_1","require","cloneDeep_1","__importDefault","map_1","CommandName_1","store","nativeCommandsSender","layoutTreeParser","layoutTreeCrawler","commandsObserver","uniqueIdProvider","optionsProcessor","layoutProcessor","simpleApi","input","default","processedRoot","process","root","CommandName","SetRoot","parse","modals","modal","processedModal","overlays","overlay","processedOverlay","commandId","generate","notify","layout","crawl","forEach","modalLayout","overlayLayout","result","setRoot","options","processDefaultOptions","SetDefaultOptions","setDefaultOptions","componentId","processOptions","MergeOptions","mergeOptions","props","updateProps","UpdateProps","layoutCloned","layoutProcessed","ShowModal","layoutNode","showModal","DismissModal","dismissModal","DismissAllModals","dismissAllModals","Push","push","Pop","pop","PopTo","popTo","PopToRoot","popToRoot","children","SetStackRoot","setStackRoot","ShowOverlay","showOverlay","DismissOverlay","dismissOverlay","GetLaunchArgs","getLaunchArgs"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,IAAMC,WAAW,GAAGF,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,kBAAD,CAA/B,CAApB;;AACA,IAAMG,KAAK,GAAGJ,OAAO,CAACG,eAAR,CAAwBF,OAAO,CAAC,YAAD,CAA/B,CAAd;;AACA,IAAMI,aAAa,GAAGJ,OAAO,6BAA7B;;IACMF,Q;AACF,oBAAYO,KAAZ,EAAmBC,oBAAnB,EAAyCC,gBAAzC,EAA2DC,iBAA3D,EAA8EC,gBAA9E,EAAgGC,gBAAhG,EAAkHC,gBAAlH,EAAoIC,eAApI,EAAqJ;AAAA;;AACjJ,SAAKP,KAAL,GAAaA,KAAb;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACH;;;;4BACOC,S,EAAW;AAAA;;AACf,UAAMC,KAAK,GAAGb,WAAW,CAACc,OAAZ,CAAoBF,SAApB,CAAd;AACA,UAAMG,aAAa,GAAG,KAAKJ,eAAL,CAAqBK,OAArB,CAA6BH,KAAK,CAACI,IAAnC,EAAyCd,aAAa,CAACe,WAAd,CAA0BC,OAAnE,CAAtB;AACA,UAAMF,IAAI,GAAG,KAAKX,gBAAL,CAAsBc,KAAtB,CAA4BL,aAA5B,CAAb;AACA,UAAMM,MAAM,GAAGnB,KAAK,CAACY,OAAN,CAAcD,KAAK,CAACQ,MAApB,EAA4B,UAACC,KAAD,EAAW;AAClD,YAAMC,cAAc,GAAG,KAAI,CAACZ,eAAL,CAAqBK,OAArB,CAA6BM,KAA7B,EAAoCnB,aAAa,CAACe,WAAd,CAA0BC,OAA9D,CAAvB;;AACA,eAAO,KAAI,CAACb,gBAAL,CAAsBc,KAAtB,CAA4BG,cAA5B,CAAP;AACH,OAHc,CAAf;AAIA,UAAMC,QAAQ,GAAGtB,KAAK,CAACY,OAAN,CAAcD,KAAK,CAACW,QAApB,EAA8B,UAACC,OAAD,EAAa;AACxD,YAAMC,gBAAgB,GAAG,KAAI,CAACf,eAAL,CAAqBK,OAArB,CAA6BS,OAA7B,EAAsCtB,aAAa,CAACe,WAAd,CAA0BC,OAAhE,CAAzB;;AACA,eAAO,KAAI,CAACb,gBAAL,CAAsBc,KAAtB,CAA4BM,gBAA5B,CAAP;AACH,OAHgB,CAAjB;AAIA,UAAMC,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BC,OAAzD,CAAlB;AACA,WAAKX,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BC,OAAvD,EAAgE;AAC5DQ,QAAAA,SAAS,EAATA,SAD4D;AAE5DG,QAAAA,MAAM,EAAE;AAAEb,UAAAA,IAAI,EAAJA,IAAF;AAAQI,UAAAA,MAAM,EAANA,MAAR;AAAgBG,UAAAA,QAAQ,EAARA;AAAhB;AAFoD,OAAhE;AAIA,WAAKjB,iBAAL,CAAuBwB,KAAvB,CAA6Bd,IAA7B,EAAmCd,aAAa,CAACe,WAAd,CAA0BC,OAA7D;AACAE,MAAAA,MAAM,CAACW,OAAP,CAAe,UAACC,WAAD,EAAiB;AAC5B,QAAA,KAAI,CAAC1B,iBAAL,CAAuBwB,KAAvB,CAA6BE,WAA7B,EAA0C9B,aAAa,CAACe,WAAd,CAA0BC,OAApE;AACH,OAFD;AAGAK,MAAAA,QAAQ,CAACQ,OAAT,CAAiB,UAACE,aAAD,EAAmB;AAChC,QAAA,KAAI,CAAC3B,iBAAL,CAAuBwB,KAAvB,CAA6BG,aAA7B,EAA4C/B,aAAa,CAACe,WAAd,CAA0BC,OAAtE;AACH,OAFD;AAGA,UAAMgB,MAAM,GAAG,KAAK9B,oBAAL,CAA0B+B,OAA1B,CAAkCT,SAAlC,EAA6C;AAAEV,QAAAA,IAAI,EAAJA,IAAF;AAAQI,QAAAA,MAAM,EAANA,MAAR;AAAgBG,QAAAA,QAAQ,EAARA;AAAhB,OAA7C,CAAf;AACA,aAAOW,MAAP;AACH;;;sCACiBE,O,EAAS;AACvB,UAAMxB,KAAK,GAAGb,WAAW,CAACc,OAAZ,CAAoBuB,OAApB,CAAd;AACA,WAAK3B,gBAAL,CAAsB4B,qBAAtB,CAA4CzB,KAA5C,EAAmDV,aAAa,CAACe,WAAd,CAA0BqB,iBAA7E;AACA,WAAKlC,oBAAL,CAA0BmC,iBAA1B,CAA4C3B,KAA5C;AACA,WAAKL,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BqB,iBAAvD,EAA0E;AAAEF,QAAAA,OAAO,EAAPA;AAAF,OAA1E;AACH;;;iCACYI,W,EAAaJ,O,EAAS;AAC/B,UAAMxB,KAAK,GAAGb,WAAW,CAACc,OAAZ,CAAoBuB,OAApB,CAAd;AACA,WAAK3B,gBAAL,CAAsBgC,cAAtB,CAAqC7B,KAArC,EAA4CV,aAAa,CAACe,WAAd,CAA0ByB,YAAtE;AACA,WAAKtC,oBAAL,CAA0BuC,YAA1B,CAAuCH,WAAvC,EAAoD5B,KAApD;AACA,WAAKL,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0ByB,YAAvD,EAAqE;AAAEF,QAAAA,WAAW,EAAXA,WAAF;AAAeJ,QAAAA,OAAO,EAAPA;AAAf,OAArE;AACH;;;gCACWI,W,EAAaI,K,EAAO;AAC5B,WAAKzC,KAAL,CAAW0C,WAAX,CAAuBL,WAAvB,EAAoCI,KAApC;AACA,WAAKrC,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0B6B,WAAvD,EAAoE;AAAEN,QAAAA,WAAW,EAAXA,WAAF;AAAeI,QAAAA,KAAK,EAALA;AAAf,OAApE;AACH;;;8BACSf,M,EAAQ;AACd,UAAMkB,YAAY,GAAGhD,WAAW,CAACc,OAAZ,CAAoBgB,MAApB,CAArB;AACA,UAAMmB,eAAe,GAAG,KAAKtC,eAAL,CAAqBK,OAArB,CAA6BgC,YAA7B,EAA2C7C,aAAa,CAACe,WAAd,CAA0BgC,SAArE,CAAxB;AACA,UAAMC,UAAU,GAAG,KAAK7C,gBAAL,CAAsBc,KAAtB,CAA4B6B,eAA5B,CAAnB;AACA,UAAMtB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BgC,SAAzD,CAAlB;AACA,WAAK1C,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BgC,SAAvD,EAAkE;AAAEvB,QAAAA,SAAS,EAATA,SAAF;AAAaG,QAAAA,MAAM,EAAEqB;AAArB,OAAlE;AACA,WAAK5C,iBAAL,CAAuBwB,KAAvB,CAA6BoB,UAA7B,EAAyChD,aAAa,CAACe,WAAd,CAA0BgC,SAAnE;AACA,UAAMf,MAAM,GAAG,KAAK9B,oBAAL,CAA0B+C,SAA1B,CAAoCzB,SAApC,EAA+CwB,UAA/C,CAAf;AACA,aAAOhB,MAAP;AACH;;;iCACYM,W,EAAaG,Y,EAAc;AACpC,UAAMjB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BmC,YAAzD,CAAlB;AACA,UAAMlB,MAAM,GAAG,KAAK9B,oBAAL,CAA0BiD,YAA1B,CAAuC3B,SAAvC,EAAkDc,WAAlD,EAA+DG,YAA/D,CAAf;AACA,WAAKpC,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BmC,YAAvD,EAAqE;AACjE1B,QAAAA,SAAS,EAATA,SADiE;AAEjEc,QAAAA,WAAW,EAAXA,WAFiE;AAGjEG,QAAAA,YAAY,EAAZA;AAHiE,OAArE;AAKA,aAAOT,MAAP;AACH;;;qCACgBS,Y,EAAc;AAC3B,UAAMjB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BqC,gBAAzD,CAAlB;AACA,UAAMpB,MAAM,GAAG,KAAK9B,oBAAL,CAA0BmD,gBAA1B,CAA2C7B,SAA3C,EAAsDiB,YAAtD,CAAf;AACA,WAAKpC,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BqC,gBAAvD,EAAyE;AAAE5B,QAAAA,SAAS,EAATA,SAAF;AAAaiB,QAAAA,YAAY,EAAZA;AAAb,OAAzE;AACA,aAAOT,MAAP;AACH;;;yBACIM,W,EAAa7B,S,EAAW;AACzB,UAAMC,KAAK,GAAGb,WAAW,CAACc,OAAZ,CAAoBF,SAApB,CAAd;AACA,UAAMqC,eAAe,GAAG,KAAKtC,eAAL,CAAqBK,OAArB,CAA6BH,KAA7B,EAAoCV,aAAa,CAACe,WAAd,CAA0BuC,IAA9D,CAAxB;AACA,UAAM3B,MAAM,GAAG,KAAKxB,gBAAL,CAAsBc,KAAtB,CAA4B6B,eAA5B,CAAf;AACA,UAAMtB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BuC,IAAzD,CAAlB;AACA,WAAKjD,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BuC,IAAvD,EAA6D;AAAE9B,QAAAA,SAAS,EAATA,SAAF;AAAac,QAAAA,WAAW,EAAXA,WAAb;AAA0BX,QAAAA,MAAM,EAANA;AAA1B,OAA7D;AACA,WAAKvB,iBAAL,CAAuBwB,KAAvB,CAA6BD,MAA7B,EAAqC3B,aAAa,CAACe,WAAd,CAA0BuC,IAA/D;AACA,UAAMtB,MAAM,GAAG,KAAK9B,oBAAL,CAA0BqD,IAA1B,CAA+B/B,SAA/B,EAA0Cc,WAA1C,EAAuDX,MAAvD,CAAf;AACA,aAAOK,MAAP;AACH;;;wBACGM,W,EAAaG,Y,EAAc;AAC3B,UAAMjB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0ByC,GAAzD,CAAlB;AACA,UAAMxB,MAAM,GAAG,KAAK9B,oBAAL,CAA0BuD,GAA1B,CAA8BjC,SAA9B,EAAyCc,WAAzC,EAAsDG,YAAtD,CAAf;AACA,WAAKpC,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0ByC,GAAvD,EAA4D;AAAEhC,QAAAA,SAAS,EAATA,SAAF;AAAac,QAAAA,WAAW,EAAXA,WAAb;AAA0BG,QAAAA,YAAY,EAAZA;AAA1B,OAA5D;AACA,aAAOT,MAAP;AACH;;;0BACKM,W,EAAaG,Y,EAAc;AAC7B,UAAMjB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0B2C,KAAzD,CAAlB;AACA,UAAM1B,MAAM,GAAG,KAAK9B,oBAAL,CAA0ByD,KAA1B,CAAgCnC,SAAhC,EAA2Cc,WAA3C,EAAwDG,YAAxD,CAAf;AACA,WAAKpC,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0B2C,KAAvD,EAA8D;AAAElC,QAAAA,SAAS,EAATA,SAAF;AAAac,QAAAA,WAAW,EAAXA,WAAb;AAA0BG,QAAAA,YAAY,EAAZA;AAA1B,OAA9D;AACA,aAAOT,MAAP;AACH;;;8BACSM,W,EAAaG,Y,EAAc;AACjC,UAAMjB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0B6C,SAAzD,CAAlB;AACA,UAAM5B,MAAM,GAAG,KAAK9B,oBAAL,CAA0B2D,SAA1B,CAAoCrC,SAApC,EAA+Cc,WAA/C,EAA4DG,YAA5D,CAAf;AACA,WAAKpC,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0B6C,SAAvD,EAAkE;AAAEpC,QAAAA,SAAS,EAATA,SAAF;AAAac,QAAAA,WAAW,EAAXA,WAAb;AAA0BG,QAAAA,YAAY,EAAZA;AAA1B,OAAlE;AACA,aAAOT,MAAP;AACH;;;iCACYM,W,EAAawB,Q,EAAU;AAAA;;AAChC,UAAMpD,KAAK,GAAGX,KAAK,CAACY,OAAN,CAAcd,WAAW,CAACc,OAAZ,CAAoBmD,QAApB,CAAd,EAA6C,UAACrD,SAAD,EAAe;AACtE,YAAMqC,eAAe,GAAG,MAAI,CAACtC,eAAL,CAAqBK,OAArB,CAA6BJ,SAA7B,EAAwCT,aAAa,CAACe,WAAd,CAA0BgD,YAAlE,CAAxB;;AACA,YAAMpC,MAAM,GAAG,MAAI,CAACxB,gBAAL,CAAsBc,KAAtB,CAA4B6B,eAA5B,CAAf;;AACA,eAAOnB,MAAP;AACH,OAJa,CAAd;AAKA,UAAMH,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BgD,YAAzD,CAAlB;AACA,WAAK1D,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BgD,YAAvD,EAAqE;AACjEvC,QAAAA,SAAS,EAATA,SADiE;AAEjEc,QAAAA,WAAW,EAAXA,WAFiE;AAGjEX,QAAAA,MAAM,EAAEjB;AAHyD,OAArE;AAKAA,MAAAA,KAAK,CAACmB,OAAN,CAAc,UAACmB,UAAD,EAAgB;AAC1B,QAAA,MAAI,CAAC5C,iBAAL,CAAuBwB,KAAvB,CAA6BoB,UAA7B,EAAyChD,aAAa,CAACe,WAAd,CAA0BgD,YAAnE;AACH,OAFD;AAGA,UAAM/B,MAAM,GAAG,KAAK9B,oBAAL,CAA0B8D,YAA1B,CAAuCxC,SAAvC,EAAkDc,WAAlD,EAA+D5B,KAA/D,CAAf;AACA,aAAOsB,MAAP;AACH;;;gCACWvB,S,EAAW;AACnB,UAAMC,KAAK,GAAGb,WAAW,CAACc,OAAZ,CAAoBF,SAApB,CAAd;AACA,UAAMqC,eAAe,GAAG,KAAKtC,eAAL,CAAqBK,OAArB,CAA6BH,KAA7B,EAAoCV,aAAa,CAACe,WAAd,CAA0BkD,WAA9D,CAAxB;AACA,UAAMtC,MAAM,GAAG,KAAKxB,gBAAL,CAAsBc,KAAtB,CAA4B6B,eAA5B,CAAf;AACA,UAAMtB,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BkD,WAAzD,CAAlB;AACA,WAAK5D,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BkD,WAAvD,EAAoE;AAAEzC,QAAAA,SAAS,EAATA,SAAF;AAAaG,QAAAA,MAAM,EAANA;AAAb,OAApE;AACA,WAAKvB,iBAAL,CAAuBwB,KAAvB,CAA6BD,MAA7B,EAAqC3B,aAAa,CAACe,WAAd,CAA0BkD,WAA/D;AACA,UAAMjC,MAAM,GAAG,KAAK9B,oBAAL,CAA0BgE,WAA1B,CAAsC1C,SAAtC,EAAiDG,MAAjD,CAAf;AACA,aAAOK,MAAP;AACH;;;mCACcM,W,EAAa;AACxB,UAAMd,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BoD,cAAzD,CAAlB;AACA,UAAMnC,MAAM,GAAG,KAAK9B,oBAAL,CAA0BkE,cAA1B,CAAyC5C,SAAzC,EAAoDc,WAApD,CAAf;AACA,WAAKjC,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BoD,cAAvD,EAAuE;AAAE3C,QAAAA,SAAS,EAATA,SAAF;AAAac,QAAAA,WAAW,EAAXA;AAAb,OAAvE;AACA,aAAON,MAAP;AACH;;;oCACe;AACZ,UAAMR,SAAS,GAAG,KAAKlB,gBAAL,CAAsBmB,QAAtB,CAA+BzB,aAAa,CAACe,WAAd,CAA0BsD,aAAzD,CAAlB;AACA,UAAMrC,MAAM,GAAG,KAAK9B,oBAAL,CAA0BoE,aAA1B,CAAwC9C,SAAxC,CAAf;AACA,WAAKnB,gBAAL,CAAsBqB,MAAtB,CAA6B1B,aAAa,CAACe,WAAd,CAA0BsD,aAAvD,EAAsE;AAAE7C,QAAAA,SAAS,EAATA;AAAF,OAAtE;AACA,aAAOQ,MAAP;AACH;;;;;;AAELxC,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Commands = void 0;\nconst tslib_1 = require(\"tslib\");\nconst cloneDeep_1 = tslib_1.__importDefault(require(\"lodash/cloneDeep\"));\nconst map_1 = tslib_1.__importDefault(require(\"lodash/map\"));\nconst CommandName_1 = require(\"../interfaces/CommandName\");\nclass Commands {\n    constructor(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor) {\n        this.store = store;\n        this.nativeCommandsSender = nativeCommandsSender;\n        this.layoutTreeParser = layoutTreeParser;\n        this.layoutTreeCrawler = layoutTreeCrawler;\n        this.commandsObserver = commandsObserver;\n        this.uniqueIdProvider = uniqueIdProvider;\n        this.optionsProcessor = optionsProcessor;\n        this.layoutProcessor = layoutProcessor;\n    }\n    setRoot(simpleApi) {\n        const input = cloneDeep_1.default(simpleApi);\n        const processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);\n        const root = this.layoutTreeParser.parse(processedRoot);\n        const modals = map_1.default(input.modals, (modal) => {\n            const processedModal = this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);\n            return this.layoutTreeParser.parse(processedModal);\n        });\n        const overlays = map_1.default(input.overlays, (overlay) => {\n            const processedOverlay = this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);\n            return this.layoutTreeParser.parse(processedOverlay);\n        });\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetRoot);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetRoot, {\n            commandId,\n            layout: { root, modals, overlays },\n        });\n        this.layoutTreeCrawler.crawl(root, CommandName_1.CommandName.SetRoot);\n        modals.forEach((modalLayout) => {\n            this.layoutTreeCrawler.crawl(modalLayout, CommandName_1.CommandName.SetRoot);\n        });\n        overlays.forEach((overlayLayout) => {\n            this.layoutTreeCrawler.crawl(overlayLayout, CommandName_1.CommandName.SetRoot);\n        });\n        const result = this.nativeCommandsSender.setRoot(commandId, { root, modals, overlays });\n        return result;\n    }\n    setDefaultOptions(options) {\n        const input = cloneDeep_1.default(options);\n        this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);\n        this.nativeCommandsSender.setDefaultOptions(input);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, { options });\n    }\n    mergeOptions(componentId, options) {\n        const input = cloneDeep_1.default(options);\n        this.optionsProcessor.processOptions(input, CommandName_1.CommandName.MergeOptions);\n        this.nativeCommandsSender.mergeOptions(componentId, input);\n        this.commandsObserver.notify(CommandName_1.CommandName.MergeOptions, { componentId, options });\n    }\n    updateProps(componentId, props) {\n        this.store.updateProps(componentId, props);\n        this.commandsObserver.notify(CommandName_1.CommandName.UpdateProps, { componentId, props });\n    }\n    showModal(layout) {\n        const layoutCloned = cloneDeep_1.default(layout);\n        const layoutProcessed = this.layoutProcessor.process(layoutCloned, CommandName_1.CommandName.ShowModal);\n        const layoutNode = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowModal);\n        this.commandsObserver.notify(CommandName_1.CommandName.ShowModal, { commandId, layout: layoutNode });\n        this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.ShowModal);\n        const result = this.nativeCommandsSender.showModal(commandId, layoutNode);\n        return result;\n    }\n    dismissModal(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);\n        const result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {\n            commandId,\n            componentId,\n            mergeOptions,\n        });\n        return result;\n    }\n    dismissAllModals(mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);\n        const result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, { commandId, mergeOptions });\n        return result;\n    }\n    push(componentId, simpleApi) {\n        const input = cloneDeep_1.default(simpleApi);\n        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.Push);\n        const layout = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Push);\n        this.commandsObserver.notify(CommandName_1.CommandName.Push, { commandId, componentId, layout });\n        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.Push);\n        const result = this.nativeCommandsSender.push(commandId, componentId, layout);\n        return result;\n    }\n    pop(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);\n        const result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.Pop, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    popTo(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);\n        const result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.PopTo, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    popToRoot(componentId, mergeOptions) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);\n        const result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);\n        this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, { commandId, componentId, mergeOptions });\n        return result;\n    }\n    setStackRoot(componentId, children) {\n        const input = map_1.default(cloneDeep_1.default(children), (simpleApi) => {\n            const layoutProcessed = this.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);\n            const layout = this.layoutTreeParser.parse(layoutProcessed);\n            return layout;\n        });\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetStackRoot);\n        this.commandsObserver.notify(CommandName_1.CommandName.SetStackRoot, {\n            commandId,\n            componentId,\n            layout: input,\n        });\n        input.forEach((layoutNode) => {\n            this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.SetStackRoot);\n        });\n        const result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);\n        return result;\n    }\n    showOverlay(simpleApi) {\n        const input = cloneDeep_1.default(simpleApi);\n        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.ShowOverlay);\n        const layout = this.layoutTreeParser.parse(layoutProcessed);\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowOverlay);\n        this.commandsObserver.notify(CommandName_1.CommandName.ShowOverlay, { commandId, layout });\n        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.ShowOverlay);\n        const result = this.nativeCommandsSender.showOverlay(commandId, layout);\n        return result;\n    }\n    dismissOverlay(componentId) {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissOverlay);\n        const result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);\n        this.commandsObserver.notify(CommandName_1.CommandName.DismissOverlay, { commandId, componentId });\n        return result;\n    }\n    getLaunchArgs() {\n        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.GetLaunchArgs);\n        const result = this.nativeCommandsSender.getLaunchArgs(commandId);\n        this.commandsObserver.notify(CommandName_1.CommandName.GetLaunchArgs, { commandId });\n        return result;\n    }\n}\nexports.Commands = Commands;\n"]},"metadata":{},"sourceType":"script"}