{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeEventsReceiver = void 0;\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar NativeEventsReceiver = function () {\n  function NativeEventsReceiver() {\n    _classCallCheck(this, NativeEventsReceiver);\n\n    try {\n      this.emitter = new react_native_1.NativeEventEmitter(react_native_1.NativeModules.RNNEventEmitter);\n    } catch (e) {\n      this.emitter = {\n        addListener: function addListener() {\n          return {\n            remove: function remove() {\n              return undefined;\n            }\n          };\n        }\n      };\n    }\n  }\n\n  _createClass(NativeEventsReceiver, [{\n    key: \"registerAppLaunchedListener\",\n    value: function registerAppLaunchedListener(callback) {\n      return this.emitter.addListener('RNN.AppLaunched', callback);\n    }\n  }, {\n    key: \"registerComponentDidAppearListener\",\n    value: function registerComponentDidAppearListener(callback) {\n      return this.emitter.addListener('RNN.ComponentDidAppear', callback);\n    }\n  }, {\n    key: \"registerComponentDidDisappearListener\",\n    value: function registerComponentDidDisappearListener(callback) {\n      return this.emitter.addListener('RNN.ComponentDidDisappear', callback);\n    }\n  }, {\n    key: \"registerNavigationButtonPressedListener\",\n    value: function registerNavigationButtonPressedListener(callback) {\n      return this.emitter.addListener('RNN.NavigationButtonPressed', callback);\n    }\n  }, {\n    key: \"registerBottomTabPressedListener\",\n    value: function registerBottomTabPressedListener(callback) {\n      return this.emitter.addListener('RNN.BottomTabPressed', callback);\n    }\n  }, {\n    key: \"registerModalDismissedListener\",\n    value: function registerModalDismissedListener(callback) {\n      return this.emitter.addListener('RNN.ModalDismissed', callback);\n    }\n  }, {\n    key: \"registerModalAttemptedToDismissListener\",\n    value: function registerModalAttemptedToDismissListener(callback) {\n      return this.emitter.addListener('RNN.ModalAttemptedToDismiss', callback);\n    }\n  }, {\n    key: \"registerSearchBarUpdatedListener\",\n    value: function registerSearchBarUpdatedListener(callback) {\n      return this.emitter.addListener('RNN.SearchBarUpdated', callback);\n    }\n  }, {\n    key: \"registerSearchBarCancelPressedListener\",\n    value: function registerSearchBarCancelPressedListener(callback) {\n      return this.emitter.addListener('RNN.SearchBarCancelPressed', callback);\n    }\n  }, {\n    key: \"registerPreviewCompletedListener\",\n    value: function registerPreviewCompletedListener(callback) {\n      return this.emitter.addListener('RNN.PreviewCompleted', callback);\n    }\n  }, {\n    key: \"registerCommandCompletedListener\",\n    value: function registerCommandCompletedListener(callback) {\n      return this.emitter.addListener('RNN.CommandCompleted', callback);\n    }\n  }, {\n    key: \"registerBottomTabSelectedListener\",\n    value: function registerBottomTabSelectedListener(callback) {\n      return this.emitter.addListener('RNN.BottomTabSelected', callback);\n    }\n  }, {\n    key: \"registerBottomTabLongPressedListener\",\n    value: function registerBottomTabLongPressedListener(callback) {\n      return this.emitter.addListener('RNN.BottomTabLongPressed', callback);\n    }\n  }, {\n    key: \"registerScreenPoppedListener\",\n    value: function registerScreenPoppedListener(callback) {\n      return this.emitter.addListener('RNN.ScreenPopped', callback);\n    }\n  }]);\n\n  return NativeEventsReceiver;\n}();\n\nexports.NativeEventsReceiver = NativeEventsReceiver;","map":{"version":3,"sources":["C:/Users/JHON/Documents/MEGA/LABURO/aumio/challenge-01/Aumionista/node_modules/react-native-navigation/lib/dist/adapters/NativeEventsReceiver.js"],"names":["Object","defineProperty","exports","value","NativeEventsReceiver","emitter","react_native_1","NativeEventEmitter","NativeModules","RNNEventEmitter","e","addListener","remove","undefined","callback"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;;;IAEMA,oB;AACF,kCAAc;AAAA;;AAGV,QAAI;AACA,WAAKC,OAAL,GAAe,IAAIC,cAAc,CAACC,kBAAnB,CAAsCD,cAAc,CAACE,aAAf,CAA6BC,eAAnE,CAAf;AACH,KAFD,CAGA,OAAOC,CAAP,EAAU;AACN,WAAKL,OAAL,GAAe;AACXM,QAAAA,WAAW,EAAE,uBAAM;AACf,iBAAO;AACHC,YAAAA,MAAM,EAAE;AAAA,qBAAMC,SAAN;AAAA;AADL,WAAP;AAGH;AALU,OAAf;AAOH;AACJ;;;;gDAC2BC,Q,EAAU;AAClC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,iBAAzB,EAA4CG,QAA5C,CAAP;AACH;;;uDACkCA,Q,EAAU;AACzC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,wBAAzB,EAAmDG,QAAnD,CAAP;AACH;;;0DACqCA,Q,EAAU;AAC5C,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,2BAAzB,EAAsDG,QAAtD,CAAP;AACH;;;4DACuCA,Q,EAAU;AAC9C,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,6BAAzB,EAAwDG,QAAxD,CAAP;AACH;;;qDACgCA,Q,EAAU;AACvC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,sBAAzB,EAAiDG,QAAjD,CAAP;AACH;;;mDAC8BA,Q,EAAU;AACrC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,oBAAzB,EAA+CG,QAA/C,CAAP;AACH;;;4DACuCA,Q,EAAU;AAC9C,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,6BAAzB,EAAwDG,QAAxD,CAAP;AACH;;;qDACgCA,Q,EAAU;AACvC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,sBAAzB,EAAiDG,QAAjD,CAAP;AACH;;;2DACsCA,Q,EAAU;AAC7C,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,4BAAzB,EAAuDG,QAAvD,CAAP;AACH;;;qDACgCA,Q,EAAU;AACvC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,sBAAzB,EAAiDG,QAAjD,CAAP;AACH;;;qDACgCA,Q,EAAU;AACvC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,sBAAzB,EAAiDG,QAAjD,CAAP;AACH;;;sDACiCA,Q,EAAU;AACxC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,uBAAzB,EAAkDG,QAAlD,CAAP;AACH;;;yDACoCA,Q,EAAU;AAC3C,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,0BAAzB,EAAqDG,QAArD,CAAP;AACH;;;iDAC4BA,Q,EAAU;AACnC,aAAO,KAAKT,OAAL,CAAaM,WAAb,CAAyB,kBAAzB,EAA6CG,QAA7C,CAAP;AACH;;;;;;AAELZ,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NativeEventsReceiver = void 0;\nconst react_native_1 = require(\"react-native\");\nclass NativeEventsReceiver {\n    constructor() {\n        // NOTE: This try catch is workaround for integration tests\n        // TODO: mock NativeEventEmitter in integration tests rather done adding try catch in source code\n        try {\n            this.emitter = new react_native_1.NativeEventEmitter(react_native_1.NativeModules.RNNEventEmitter);\n        }\n        catch (e) {\n            this.emitter = {\n                addListener: () => {\n                    return {\n                        remove: () => undefined,\n                    };\n                },\n            };\n        }\n    }\n    registerAppLaunchedListener(callback) {\n        return this.emitter.addListener('RNN.AppLaunched', callback);\n    }\n    registerComponentDidAppearListener(callback) {\n        return this.emitter.addListener('RNN.ComponentDidAppear', callback);\n    }\n    registerComponentDidDisappearListener(callback) {\n        return this.emitter.addListener('RNN.ComponentDidDisappear', callback);\n    }\n    registerNavigationButtonPressedListener(callback) {\n        return this.emitter.addListener('RNN.NavigationButtonPressed', callback);\n    }\n    registerBottomTabPressedListener(callback) {\n        return this.emitter.addListener('RNN.BottomTabPressed', callback);\n    }\n    registerModalDismissedListener(callback) {\n        return this.emitter.addListener('RNN.ModalDismissed', callback);\n    }\n    registerModalAttemptedToDismissListener(callback) {\n        return this.emitter.addListener('RNN.ModalAttemptedToDismiss', callback);\n    }\n    registerSearchBarUpdatedListener(callback) {\n        return this.emitter.addListener('RNN.SearchBarUpdated', callback);\n    }\n    registerSearchBarCancelPressedListener(callback) {\n        return this.emitter.addListener('RNN.SearchBarCancelPressed', callback);\n    }\n    registerPreviewCompletedListener(callback) {\n        return this.emitter.addListener('RNN.PreviewCompleted', callback);\n    }\n    registerCommandCompletedListener(callback) {\n        return this.emitter.addListener('RNN.CommandCompleted', callback);\n    }\n    registerBottomTabSelectedListener(callback) {\n        return this.emitter.addListener('RNN.BottomTabSelected', callback);\n    }\n    registerBottomTabLongPressedListener(callback) {\n        return this.emitter.addListener('RNN.BottomTabLongPressed', callback);\n    }\n    registerScreenPoppedListener(callback) {\n        return this.emitter.addListener('RNN.ScreenPopped', callback);\n    }\n}\nexports.NativeEventsReceiver = NativeEventsReceiver;\n"]},"metadata":{},"sourceType":"script"}