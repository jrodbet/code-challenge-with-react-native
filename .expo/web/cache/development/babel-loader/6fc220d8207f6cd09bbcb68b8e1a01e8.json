{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Store = void 0;\n\nvar Store = function () {\n  function Store() {\n    _classCallCheck(this, Store);\n\n    this.componentsByName = {};\n    this.propsById = {};\n    this.componentsInstancesById = {};\n    this.wrappedComponents = {};\n  }\n\n  _createClass(Store, [{\n    key: \"updateProps\",\n    value: function updateProps(componentId, props) {\n      this.mergeNewPropsForId(componentId, props);\n      var component = this.componentsInstancesById[componentId];\n\n      if (component) {\n        this.componentsInstancesById[componentId].setProps(props);\n      }\n    }\n  }, {\n    key: \"getPropsForId\",\n    value: function getPropsForId(componentId) {\n      return this.propsById[componentId] || {};\n    }\n  }, {\n    key: \"mergeNewPropsForId\",\n    value: function mergeNewPropsForId(componentId, newProps) {\n      var currentProps = this.getPropsForId(componentId);\n      this.propsById[componentId] = _objectSpread(_objectSpread({}, currentProps), newProps);\n    }\n  }, {\n    key: \"clearComponent\",\n    value: function clearComponent(componentId) {\n      delete this.propsById[componentId];\n      delete this.componentsInstancesById[componentId];\n    }\n  }, {\n    key: \"setComponentClassForName\",\n    value: function setComponentClassForName(componentName, ComponentClass) {\n      delete this.wrappedComponents[componentName];\n      this.componentsByName[componentName.toString()] = ComponentClass;\n    }\n  }, {\n    key: \"getComponentClassForName\",\n    value: function getComponentClassForName(componentName) {\n      this.ensureClassForName(componentName);\n      return this.componentsByName[componentName.toString()];\n    }\n  }, {\n    key: \"ensureClassForName\",\n    value: function ensureClassForName(componentName) {\n      if (!this.componentsByName[componentName.toString()] && this.lazyRegistratorFn) {\n        this.lazyRegistratorFn(componentName);\n      }\n    }\n  }, {\n    key: \"setComponentInstance\",\n    value: function setComponentInstance(id, component) {\n      this.componentsInstancesById[id] = component;\n    }\n  }, {\n    key: \"getComponentInstance\",\n    value: function getComponentInstance(id) {\n      return this.componentsInstancesById[id];\n    }\n  }, {\n    key: \"setWrappedComponent\",\n    value: function setWrappedComponent(componentName, wrappedComponent) {\n      this.wrappedComponents[componentName] = wrappedComponent;\n    }\n  }, {\n    key: \"hasRegisteredWrappedComponent\",\n    value: function hasRegisteredWrappedComponent(componentName) {\n      return componentName in this.wrappedComponents;\n    }\n  }, {\n    key: \"getWrappedComponent\",\n    value: function getWrappedComponent(componentName) {\n      return this.wrappedComponents[componentName];\n    }\n  }, {\n    key: \"setLazyComponentRegistrator\",\n    value: function setLazyComponentRegistrator(lazyRegistratorFn) {\n      this.lazyRegistratorFn = lazyRegistratorFn;\n    }\n  }]);\n\n  return Store;\n}();\n\nexports.Store = Store;","map":{"version":3,"sources":["C:/Users/JHON/Documents/MEGA/LABURO/aumio/challenge-01/Aumionista/node_modules/react-native-navigation/lib/dist/components/Store.js"],"names":["Object","defineProperty","exports","value","Store","componentsByName","propsById","componentsInstancesById","wrappedComponents","componentId","props","mergeNewPropsForId","component","setProps","newProps","currentProps","getPropsForId","componentName","ComponentClass","toString","ensureClassForName","lazyRegistratorFn","id","wrappedComponent"],"mappings":"AAAA;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB;;IACMA,K;AACF,mBAAc;AAAA;;AACV,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,uBAAL,GAA+B,EAA/B;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACH;;;;gCACWC,W,EAAaC,K,EAAO;AAC5B,WAAKC,kBAAL,CAAwBF,WAAxB,EAAqCC,KAArC;AACA,UAAME,SAAS,GAAG,KAAKL,uBAAL,CAA6BE,WAA7B,CAAlB;;AACA,UAAIG,SAAJ,EAAe;AACX,aAAKL,uBAAL,CAA6BE,WAA7B,EAA0CI,QAA1C,CAAmDH,KAAnD;AACH;AACJ;;;kCACaD,W,EAAa;AACvB,aAAO,KAAKH,SAAL,CAAeG,WAAf,KAA+B,EAAtC;AACH;;;uCACkBA,W,EAAaK,Q,EAAU;AACtC,UAAMC,YAAY,GAAG,KAAKC,aAAL,CAAmBP,WAAnB,CAArB;AACA,WAAKH,SAAL,CAAeG,WAAf,oCACOM,YADP,GAEOD,QAFP;AAIH;;;mCACcL,W,EAAa;AACxB,aAAO,KAAKH,SAAL,CAAeG,WAAf,CAAP;AACA,aAAO,KAAKF,uBAAL,CAA6BE,WAA7B,CAAP;AACH;;;6CACwBQ,a,EAAeC,c,EAAgB;AACpD,aAAO,KAAKV,iBAAL,CAAuBS,aAAvB,CAAP;AACA,WAAKZ,gBAAL,CAAsBY,aAAa,CAACE,QAAd,EAAtB,IAAkDD,cAAlD;AACH;;;6CACwBD,a,EAAe;AACpC,WAAKG,kBAAL,CAAwBH,aAAxB;AACA,aAAO,KAAKZ,gBAAL,CAAsBY,aAAa,CAACE,QAAd,EAAtB,CAAP;AACH;;;uCACkBF,a,EAAe;AAC9B,UAAI,CAAC,KAAKZ,gBAAL,CAAsBY,aAAa,CAACE,QAAd,EAAtB,CAAD,IAAoD,KAAKE,iBAA7D,EAAgF;AAC5E,aAAKA,iBAAL,CAAuBJ,aAAvB;AACH;AACJ;;;yCACoBK,E,EAAIV,S,EAAW;AAChC,WAAKL,uBAAL,CAA6Be,EAA7B,IAAmCV,SAAnC;AACH;;;yCACoBU,E,EAAI;AACrB,aAAO,KAAKf,uBAAL,CAA6Be,EAA7B,CAAP;AACH;;;wCACmBL,a,EAAeM,gB,EAAkB;AACjD,WAAKf,iBAAL,CAAuBS,aAAvB,IAAwCM,gBAAxC;AACH;;;kDAC6BN,a,EAAe;AACzC,aAAOA,aAAa,IAAI,KAAKT,iBAA7B;AACH;;;wCACmBS,a,EAAe;AAC/B,aAAO,KAAKT,iBAAL,CAAuBS,aAAvB,CAAP;AACH;;;gDAC2BI,iB,EAAmB;AAC3C,WAAKA,iBAAL,GAAyBA,iBAAzB;AACH;;;;;;AAELnB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Store = void 0;\nclass Store {\n    constructor() {\n        this.componentsByName = {};\n        this.propsById = {};\n        this.componentsInstancesById = {};\n        this.wrappedComponents = {};\n    }\n    updateProps(componentId, props) {\n        this.mergeNewPropsForId(componentId, props);\n        const component = this.componentsInstancesById[componentId];\n        if (component) {\n            this.componentsInstancesById[componentId].setProps(props);\n        }\n    }\n    getPropsForId(componentId) {\n        return this.propsById[componentId] || {};\n    }\n    mergeNewPropsForId(componentId, newProps) {\n        const currentProps = this.getPropsForId(componentId);\n        this.propsById[componentId] = {\n            ...currentProps,\n            ...newProps,\n        };\n    }\n    clearComponent(componentId) {\n        delete this.propsById[componentId];\n        delete this.componentsInstancesById[componentId];\n    }\n    setComponentClassForName(componentName, ComponentClass) {\n        delete this.wrappedComponents[componentName];\n        this.componentsByName[componentName.toString()] = ComponentClass;\n    }\n    getComponentClassForName(componentName) {\n        this.ensureClassForName(componentName);\n        return this.componentsByName[componentName.toString()];\n    }\n    ensureClassForName(componentName) {\n        if (!this.componentsByName[componentName.toString()] && this.lazyRegistratorFn) {\n            this.lazyRegistratorFn(componentName);\n        }\n    }\n    setComponentInstance(id, component) {\n        this.componentsInstancesById[id] = component;\n    }\n    getComponentInstance(id) {\n        return this.componentsInstancesById[id];\n    }\n    setWrappedComponent(componentName, wrappedComponent) {\n        this.wrappedComponents[componentName] = wrappedComponent;\n    }\n    hasRegisteredWrappedComponent(componentName) {\n        return componentName in this.wrappedComponents;\n    }\n    getWrappedComponent(componentName) {\n        return this.wrappedComponents[componentName];\n    }\n    setLazyComponentRegistrator(lazyRegistratorFn) {\n        this.lazyRegistratorFn = lazyRegistratorFn;\n    }\n}\nexports.Store = Store;\n"]},"metadata":{},"sourceType":"script"}